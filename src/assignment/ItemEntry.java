package assignment;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;

public class ItemEntry extends javax.swing.JFrame {
    private JTable itemTable;
    private DefaultTableModel tableModel;
    private ArrayList<Item> itemList;

    /**
     * Creates a new ItemListFrame to display the available items in a table.
     *
     */
    public ItemEntry() {
        initComponents();
        loadItems();
        System.out.println(itemList);
        initializeTable(itemList);
        setTitle("Available Items");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void initializeTable(ArrayList<Item> itemList) {
        // Create the table model with column headers
        String[] columnHeaders = {"Item Code", "Item Name", "Price", "Supplier"};
        tableModel = new DefaultTableModel(columnHeaders, 0);

        // Populate the table model with item data
        for (Item item : itemList) {
            Object[] rowData = {item.getItemCode(), item.getItemName(), item.getPrice(), item.getSupplier()};
            tableModel.addRow(rowData);
        }

        // Set the table model for the JTable
        jTable1.setModel(tableModel);

    }
        
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveExit.setText("Save and Exit");
        saveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExitActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Code", "Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Code");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Name");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Price");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Quantity");
        }

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveExit))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveExit)
                    .addComponent(add)
                    .addComponent(delete))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveExitActionPerformed
        saveTableData();
    }//GEN-LAST:event_saveExitActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        new AddItem().setVisible(true);
        dispose();
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        new DeleteItem().setVisible(true);
    }//GEN-LAST:event_deleteActionPerformed

    private void loadItems(){
        itemList = new ArrayList<>();
        String itemsTxt = "src\\assignment\\items.txt";
        try (BufferedReader reader = new BufferedReader(new FileReader(itemsTxt))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] itemData = line.split(", ");

                String itemCode = itemData[0];
                String itemName = itemData[1];
                double price = Double.parseDouble(itemData[2]);
                String supplier = itemData[3];
                Item item = new Item(itemCode, itemName, price, supplier);
                itemList.add(item);
        }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void saveTableData() {
        int numRows = jTable1.getRowCount();

        for (int row = 0; row < numRows; row++) {
            String itemCode = (String) jTable1.getValueAt(row, 0);
            String itemName = (String) jTable1.getValueAt(row, 1);
            double price;
            try {
                price = Double.parseDouble(jTable1.getValueAt(row, 2).toString());
            } catch (NumberFormatException e) {
                // Handle invalid price format, e.g., show a warning message or set a default value
                price = 0.0; // or any default value
            }
            String supplier = (String) jTable1.getValueAt(row, 3);

            // Find the corresponding Item object in the itemList based on itemCode
            for (Item item : itemList) {
                if (item.getItemCode().equals(itemCode)) {
                    // Update the Item object with the edited values
                    item.setItemName(itemName);
                    item.setPrice(price);
                    item.setSupplier(supplier);
                    break;
                }
            }
        }
        saveToFile();
        JOptionPane.showMessageDialog(this, "Changes saved successfully.");
        dispose();
    }
    
    private void saveToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src\\assignment\\items.txt"))) {
            for (Item item : itemList) {
                String line = item.getItemCode() + ", " + item.getItemName() + ", " + item.getPrice() + ", " + item.getSupplier();
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
            // Handle any exceptions that occur during file writing
            JOptionPane.showMessageDialog(this, "Error saving data to items.txt");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton saveExit;
    // End of variables declaration//GEN-END:variables
}
